{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/SignOut/index.js","components/Session/context.js","components/Session/withAuthentication.js","components/Navigation/index.js","constants/routes.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/index.js","components/PasswordForget/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","app","initializeApp","this","type","onClick","AuthUserContext","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","NavigationAuth","to","SignOut","NavigationNonAuth","Navigation","Landing","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","then","history","push","catch","preventDefault","onChange","target","name","isInvalid","placeholder","disabled","message","SignUpLink","SignUpForm","withRouter","SignUpPage","SignInFormBase","SignInForm","compose","SignInPage","PasswordForget","Home","Account","Admin","exact","path","component","LandingPage","PasswordForgetPage","HomePage","AccountPage","AdminPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fc6617b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/auth';\n\n// const config = {\n//     apiKey: \"AIzaSyA696uczKAMC7SjAmR69TN-iXXy8M5rxwk\",\n//     authDomain: \"padel-score-tracker.firebaseapp.com\",\n//     databaseURL: \"https://padel-score-tracker.firebaseio.com\",\n//     projectId: \"padel-score-tracker\",\n//     storageBucket: \"padel-score-tracker.appspot.com\",\n//     messagingSenderId: \"769521886024\",\n//     appId: \"1:769521886024:web:a5b9c9a3823500d7a7097d\",\n//     measurementId: \"G-RHCL15SM91\"\n// };\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n\n        this.auth = app.auth();\n    }\n\n    // *** Auth API ***\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n}\n\nexport default Firebase;","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };","import React from 'react';\nimport { withFirebase } from '../Firebase';\nconst SignOutButton = ({ firebase }) => (\n  <button type=\"button\" onClick={firebase.doSignOut}>\n    Sign Out\n  </button>\n);\nexport default withFirebase(SignOutButton);","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;","import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                authUser: null,\n            };\n        }\n\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    authUser\n                        ? this.setState({ authUser })\n                        : this.setState({ authUser: null });\n                },\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n    }\n\n    return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\n\nimport { AuthUserContext } from '../Session';\n\nconst Navigation = () => (\n  <div>\n    <AuthUserContext.Consumer>\n      {authUser =>\n        authUser ? <NavigationAuth /> : <NavigationNonAuth />\n      }\n    </AuthUserContext.Consumer>\n  </div>\n);\n\nconst NavigationAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.HOME}>Home</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.ACCOUNT}>Account</Link>\n    </li>\n    <li>\n      <SignOutButton />\n    </li>\n  </ul>\n);\n\nconst NavigationNonAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n    </li>\n  </ul>\n);\n\nexport default Navigation;","export const LANDING = \"/\";\nexport const SIGN_UP = \"/signup\";\nexport const SIGN_IN = \"/signin\";\nexport const HOME = \"/home\";\nexport const ACCOUNT = \"/account\";\nexport const ADMIN = \"/admin\";\nexport const PASSWORD_FORGET = \"/pw-forget\";\n","import React from \"react\";\n\nconst Landing = () => (\n  <div>\n    <h1>Landing</h1>\n  </div>\n);\n\nexport default Landing;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignUpPage = () => (\n  <div>\n    <h1>SignUp</h1>\n    <SignUpForm />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\n\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n\n    this.props.firebase\n      .doCreateUserWithEmailAndPassword(email, passwordOne)\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error,\n    } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne === '' ||\n      email === '' ||\n      username === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"username\"\n          value={username}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Full Name\"\n        />\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign Up\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\n\nconst SignUpForm = withRouter(withFirebase(SignUpFormBase));\n\nexport default SignUpPage;\n\nexport { SignUpForm, SignUpLink };","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { SignUpLink } from '../SignUp';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n  <div>\n    <h1>SignIn</h1>\n    <SignInForm />\n    <SignUpLink />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n\n    const isInvalid = password === '' || email === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst SignInForm = compose(\n  withRouter,\n  withFirebase,\n)(SignInFormBase);\n\nexport default SignInPage;\n\nexport { SignInForm };","import React from 'react';\n\nconst PasswordForget = () => (\n    <div>\n        <h1>PasswordForget</h1>\n    </div>\n);\n\nexport default PasswordForget;","import React from \"react\";\n\nconst Home = () => (\n  <div>\n    <h1>Home</h1>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst Account = () => (\n    <div>\n        <h1>Account</h1>\n    </div>\n);\n\nexport default Account;","import React from 'react';\n\nconst Admin = () => (\n    <div>\n        <h1>Admin</h1>\n    </div>\n);\n\nexport default Admin;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\n\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation />\n\n      <hr />\n\n      <Route exact path={ROUTES.LANDING} component={LandingPage} />\n      <Route exact path={ROUTES.SIGN_UP} component={SignUpPage} />\n      <Route exact path={ROUTES.SIGN_IN} component={SignInPage} />\n      <Route\n        exact\n        path={ROUTES.PASSWORD_FORGET}\n        component={PasswordForgetPage}\n      />\n      <Route exact path={ROUTES.HOME} component={HomePage} />\n      <Route exact path={ROUTES.ACCOUNT} component={AccountPage} />\n      <Route exact path={ROUTES.ADMIN} component={AdminPage} />\n    </div>\n  </Router>\n);\n\nexport default withAuthentication(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}